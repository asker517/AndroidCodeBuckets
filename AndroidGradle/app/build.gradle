apply plugin: 'com.android.application'

def releaseTime() {
  return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8:00"))
}

android {
  compileSdkVersion rootProject.ext.android.compileSdkVersion
  buildToolsVersion rootProject.ext.android.buildToolsVersion


  defaultConfig {
    applicationId "me.onez.androidgradle"
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode rootProject.ext.android.versionCode
    versionName rootProject.ext.android.versionName
  }

  //自定义build Type 默认debug/release
  signingConfigs {
    release {
      storeFile file(KEYSTORE_FILE)
      storePassword KEYSTORE_PASSWORD
      keyAlias KEY_ALIAS
      keyPassword KEY_PASSWORD
    }

    preview {
      storeFile file(KEYSTORE_FILE)
      storePassword KEYSTORE_PASSWORD
      keyAlias KEY_ALIAS
      keyPassword KEY_PASSWORD
    }
  }

  // minifyEnabled 混淆处理
  // shrinkResources 去除无用资源
  // signingConfig 签名
  // proguardFiles 混淆配置
  // applicationIdSuffix 增加APP ID(PackageName)的后缀
  // debuggable 是否保留调试信息
  // manifestPlaceholders 用于替换AndroidManifest.xml中的占位符: ${XXX}

  //更改build type配置
  buildTypes {

    debug {
      //      applicationIdSuffix ".debug"
      manifestPlaceholders = [app_label: "@string/app_name_debug"]
      debuggable true
      minifyEnabled false
      zipAlignEnabled false
      shrinkResources false
    }

    preview {
      //      applicationIdSuffix ".preview"
      manifestPlaceholders = [app_label: "@string/app_name_preview"]
      debuggable true
      shrinkResources true
      minifyEnabled true
      signingConfig signingConfigs.preview
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    release {
      manifestPlaceholders = [app_label: "@string/app_name"]
      debuggable false
      minifyEnabled true
      zipAlignEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    //自定义输出APK文件名称
    applicationVariants.all { variant ->
      variant.outputs.each { output ->
        output.outputFile = new File(output.outputFile.parent + "/${variant.buildType.name}",
            "app_v${variant.versionName}_${releaseTime()}_${variant.buildType.name}.apk")
      }
    }

    packagingOptions {
      exclude 'META-INF/DEPENDENCIES.txt'
      exclude 'META-INF/LICENSE.txt'
      exclude 'META-INF/NOTICE.txt'
      exclude 'META-INF/NOTICE'
      exclude 'META-INF/LICENSE'
      exclude 'META-INF/DEPENDENCIES'
      exclude 'META-INF/notice.txt'
      exclude 'META-INF/license.txt'
      exclude 'META-INF/dependencies.txt'
    }

    lintOptions {
      disable 'MissingTranslation', 'ExtraTranslation'
      abortOnError false;
    }
  }

  //用于多渠道打包 flavor名如果是数字开头，必须用引号引起来
  productFlavors {
    wandoujia {
      manifestPlaceholders = [CHANNEL_VALUE: "wandoujia"]
    }
    xiaomi {
      manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
    }
    "360" {
      manifestPlaceholders = [CHANNEL_VALUE: "360"]
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile 'junit:junit:4.12'
  compile rootProject.ext.dependencies["support-design"]
  compile rootProject.ext.dependencies["appcompat-v7"]
  compile rootProject.ext.dependencies["recyclerview-v7"]
  compile rootProject.ext.dependencies["support-v4"]
}
